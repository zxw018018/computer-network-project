#!/usr/bin/env python

import socket, sys, time, random, json, thread



def map_stuff():
    global servers, arguments, udp_socket

    servers = arguments[5:][:]
    for server in servers:
        server_name = server.split(':')[0]
        server_port = server.split(':')[1]
        ipaddr = []
        ipaddr.append(socket.gethostbyname(server_name))
        ipaddr.append(':')
        ipaddr.append(server_port)
        ipaddr = ''.join(ipaddr)
        RIP_table[ipaddr] = {"Next":ipaddr, "Cost": int(server.split(':')[-1])}
        neighbor.append(ipaddr)
        address_map[ipaddr] = {"next_seq":0, "seq":0, "last_ACK": time.time(), "base":0, "expected_seq":0,  "sent_count":0, "buffer":[], "window":[]}
        
        


def client():
    global buffer_size, packet_num, udp_socket, arguments, servers

    buffer_size = 4096
    packet_num = 100
    
    map_stuff()


    thread.start_new_thread(handle_timeout, ())   
    thread.start_new_thread(handle_response, ())      
    thread.start_new_thread(send_packet, ()) 

    while(True):
        try: 
            data, addr = udp_socket.recvfrom(buffer_size)
            recv_addr = []
            recv_addr.append(str(addr[0]))
            recv_addr.append(':')
            recv_addr.append(str(addr[1]))
            addr = ''.join(recv_addr)
            if 'resend' not in data:
                data_window.append([data, addr])
            # if address_map[neighbor[len(neighbor)-1]]["sent_count"] == packet_num+1:
            #     print "100 packets sent"
        except KeyboardInterrupt:
            try: 
                udp_socket.close()
                return
            except socket.error:
                return


           

def send_packet():
    global address_map, udp_socket, host_port, window_size, loss_rate
    while True:
        for addr, value in address_map.iteritems():
            
            while (value["next_seq"] < value["base"] + window_size) and value["buffer"]: # the GBN principle
                randomNum = random.random()
                ipaddr, port = addr.split(':')
                port = int(port)
                data = json.loads(value["buffer"][0])
                value["sent_count"] += 1
                value["next_seq"] += 1
                value["window"].append(data)
                if randomNum >= loss_rate:
                    try: 
                        udp_socket.sendto(json.dumps(data), (ipaddr, port))
                    except socket.error:
                        print "packet_sender wrong"
                        return
                if value["sent_count"] == packet_num+1:
                    print "Goodput Rate at ", addr, str(value["base"]) + '/100'
                value["buffer"].pop(0)



def handle_response():
    global address_map, udp_socket, data_window, period, RIP_table
    latest_sendtime = time.time()
    while True:
        if len(data_window) > 0:
            data, addr = data_window.pop(0)
            data = json.loads(data)
            ipaddr = addr.split(':')[0]
            port = int(addr.split(':')[1])
            
            if addr not in address_map :
                address_map[addr] = {"next_seq":0}
                address_map[addr].update({"seq":0})
                address_map[addr].update({"buffer":[]})
                address_map[addr].update({"base":0})
                address_map[addr].update({"expected_seq":0})
                address_map[addr].update({"sent_count":0})
                address_map[addr].update({"window": []})
                address_map[addr].update({"last_ACK": time.time()})
            if data["SEQ"] > -2 and data["SEQ"] < 0:
                while data["ACK"] > address_map[addr]["base"]:
                    address_map[addr]["window"].pop(0)
                    address_map[addr]["last_ACK"] = time.time()
                    address_map[addr]["base"] += 1
            elif data["SEQ"] > address_map[addr]["expected_seq"]-1 and data["SEQ"] < address_map[addr]["expected_seq"]+1 :
                    ack_data = build_json(0,0,0,0, -1, address_map[addr]["expected_seq"]+1)
                    address_map[addr]["expected_seq"] += 1
                    udp_socket.sendto(json.dumps(ack_data), (addr.split(':')[0], int(addr.split(':')[1])))
            else:
                print data, address_map[addr]["expected_seq"]
                ack_data = build_json(0,0,0,0, -1, address_map[addr]["expected_seq"])
                data_send = json.dumps(ack_data)
                udp_socket.sendto(data_send, (addr.split(':')[0], int(addr.split(':')[1])))
            
        until_last_send = time.time() - latest_sendtime
        if until_last_send > period:
            Dest = Next = Cost = []
            for addr, value in RIP_table.iteritems():
                Dest.append(addr)
                Next.append(value["Next"])
                Cost.append(value["Cost"])
            for addr, value in address_map.iteritems():
                data = build_json(Dest, Next, Cost, "JRIP", value["seq"], -1 )
                value["buffer"].append(json.dumps(data))
                value["seq"] += 1
            latest_sendtime = time.time()

def build_json(Dest, Next, Cost,Type, seq, ack ):
    js = {"uni": "xz2663"}
    js.update({"SEQ": seq})
    js.update({"ACK": ack})
    table = {}
    if(Type == "JRIP"):
        table.update({"Type": "JRIP"})
        table["RIPTable"] = []
        for i in range(len(Dest)):
            tmp = {"Dest": Dest[i]}
            tmp.update({"Next": Next[i]})
            tmp.update({"Cost": Cost[i]})
            table["RIPTable"].append(tmp)
    else:
        if(Type == "TRACE"):
            table["Type"] = Type
    js["Data"] = table
    return js

def handle_timeout():
    global address_map, udp_socket, timeout
    while True:
        for addr, value in address_map.iteritems():
            wait_time = time.time() - value["last_ACK"]
            if wait_time > timeout:
                if len(value["window"]) > 0:
                    tmp = value["window"][0]
                    value["sent_count"] +=1
                    if value["sent_count"] == packet_num+1:
                        count = str(value["base"])
                        print "Goodput Rate at " + addr + ' '+ count + '/100'
                    
                    data_send = json.dumps(tmp)
                    udp_socket.sendto(data_send,(addr.split(':')[0], int(addr.split(':')[1])))
                value["last_ACK"] = time.time()
       


def main():
    global RIP_table, neighbor, address_map, loss_rate, udp_socket, host_port, window_size, data_window, period, timeout, arguments

    RIP_table = {}
    period = 4
    timeout = 0.5
    address_map = {}
    neighbor = []
    data_window = []
    window_size = 5
    
    arguments = sys.argv

    if (len(arguments) < 6 or arguments[1] != '-l' or arguments[3] != '-p'):
        print "usage: ./jrip2 -l [loss] -p [port] [ip:port:cost]"
        sys.exit(1)


    loss_rate = arguments[2]
    loss_rate = float(loss_rate)
    host_port = arguments[4]
    host_port = int(host_port)
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.bind(('', host_port))

    client()





if __name__ == "__main__":
    main()
