#!/usr/bin/env python2

import socket, sys, numpy, random, json, thread

def main():
    buffer_size = 4096
    if(len(sys.argv) != 5):
        print('Usage ./jtraceroute -p [port] [hosts]')
        sys.exit(1)
    arguments = sys.argv
    host_port = arguments[2]
    host_port = int(host_port)
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.bind(('', host_port))

    hosts = list()
    ports = list()
    servers = arguments[3:][:]
    for server in servers:
        hosts.append(socket.gethostbyname(server.split(':')[0]))
        ports.append(int(server.split(':')[1]))

    Origin = list()
    Origin.append(hosts[0])
    Origin.append(':')
    Origin.append(str(ports[0]))
    Origin = ''.join(Origin)
    Destination = list()
    Destination.append(hosts[1]) 
    Destination.append(':')
    Destination.append(str(ports[1]))
    Destination = ''.join(Destination)

    udp_socket.sendto(json.dumps(build_json("TRACE",0,0,0,0,0, Origin, Destination)), (hosts[0], ports[0]))
    data, addr = udp_socket.recvfrom(buffer_size)
    pout = json.loads(data)["Data"]["TRACE"]
    for i in range(len(pout)):
        print pout[i]

def build_json(Type, Seq, Ack, Dest, Next, Cost, Origin_addr, Dest_addr):
    js = {"uni": "xz2663"}
    js.update({"SEQ": Seq}) 
    js.update({"ACK": Ack})
    js.update({"Data": {}})
    table = {}
    if(Type == "TRACE"):
        table["Type"] = "TRACE"
        table["Origin"] = Origin_addr
        table["Destination"] = Dest_addr
        table["TRACE"] = list()
    js["Data"] = table 
    return js
 
if __name__ == "__main__":
    main()